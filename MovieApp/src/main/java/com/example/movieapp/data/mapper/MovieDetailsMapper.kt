package com.example.movieapp.data.mapper

import com.example.movieapp.data.models.MovieDetailsDto
import com.example.movieapp.domain.models.MovieDetails
import com.example.movieapp.domain.models.MovieItem

fun MovieDetailsDto.toDomain() = MovieDetails(
    kinopoiskId = kinopoiskId,
    kinopoiskHDId = kinopoiskHDId,
    imdbId = imdbId,
    nameRu = nameRu,
    nameEn = nameEn,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    posterUrlPreview = posterUrlPreview,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    reviewsCount = reviewsCount,
    ratingGoodReview = ratingGoodReview,
    ratingGoodReviewVoteCount = ratingGoodReviewVoteCount,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    ratingFilmCritics = ratingFilmCritics,
    ratingFilmCriticsVoteCount = ratingFilmCriticsVoteCount,
    ratingAwait = ratingAwait,
    ratingAwaitCount = ratingAwaitCount,
    ratingRfCritics = ratingRfCritics,
    ratingRfCriticsVoteCount = ratingRfCriticsVoteCount,
    webUrl = webUrl,
    year = year,
    filmLength = filmLength,
    slogan = slogan,
    description = description,
    shortDescription = shortDescription,
    editorAnnotation = editorAnnotation,
    isTicketsAvailable = isTicketsAvailable,
    productionStatus = productionStatus,
    type = type,
    ratingMpaa = ratingMpaa,
    ratingAgeLimits = ratingAgeLimits,
    startYear = startYear,
    endYear = endYear,
    serial = serial,
    shortFilm = shortFilm,
    completed = completed,
    hasImax = hasImax,
    has3D = has3D,
    lastSync = lastSync,
    countries = countries.map { it.toDomain() },
    genres = genres.map { it.toDomain() }
)

fun MovieDetails.toDto() = MovieDetailsDto(
    kinopoiskId = kinopoiskId,
    kinopoiskHDId = kinopoiskHDId,
    imdbId = imdbId,
    nameRu = nameRu,
    nameEn = nameEn,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    posterUrlPreview = posterUrlPreview,
    coverUrl = coverUrl,
    logoUrl = logoUrl,
    reviewsCount = reviewsCount,
    ratingGoodReview = ratingGoodReview,
    ratingGoodReviewVoteCount = ratingGoodReviewVoteCount,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    ratingFilmCritics = ratingFilmCritics,
    ratingFilmCriticsVoteCount = ratingFilmCriticsVoteCount,
    ratingAwait = ratingAwait,
    ratingAwaitCount = ratingAwaitCount,
    ratingRfCritics = ratingRfCritics,
    ratingRfCriticsVoteCount = ratingRfCriticsVoteCount,
    webUrl = webUrl,
    year = year,
    filmLength = filmLength,
    slogan = slogan,
    description = description,
    shortDescription = shortDescription,
    editorAnnotation = editorAnnotation,
    isTicketsAvailable = isTicketsAvailable,
    productionStatus = productionStatus,
    type = type,
    ratingMpaa = ratingMpaa,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries.map { it.toDto() },
    genres = genres.map { it.toDto() },
    startYear = startYear,
    endYear = endYear,
    serial = serial,
    shortFilm = shortFilm,
    completed = completed,
    hasImax = hasImax,
    has3D = has3D,
    lastSync = lastSync
)

fun MovieDetails.toMovieItemDto() = MovieItem(
    kinopoiskId = kinopoiskId,
    imdbId = imdbId,
    nameRu = nameRu,
    nameEn = nameEn,
    nameOriginal = nameOriginal,
    countries = countries,
    genres = genres,
    ratingKinopoisk = ratingKinopoisk,
    ratingImdb = ratingImdb,
    year = year,
    type = type,
    posterUrl = posterUrl,
    posterUrlPreview = posterUrlPreview
)